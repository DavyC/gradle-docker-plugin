sourceSets {
    testSetup {
        groovy.srcDir file('src/testSetup/groovy')
        resources.srcDir file('src/testSetup/resources')
        compileClasspath += configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

idea.module {
    sourceSets.testSetup.allSource.srcDirs.each {
        testSourceDirs += it
    }
}

tasks.withType(Test) { task ->
    testLogging {
        events 'skipped'
    }

    if (project.hasProperty('bootstrapDocker') && Boolean.parseBoolean(project.getProperty('bootstrapDocker'))) {
        systemProperty 'dockerServerUrl', 'http://localhost:2375'
    } else {
        
        // TODO: remove `dockerServerUrl` properties with version 3.0.10
        def dockerServerUrl = project.findProperty('dockerServerUrl') ?: (System.properties['dockerServerUrl'] ?: System.getenv('DOCKER_SERVER_URL'))
        if(!dockerServerUrl) {
            dockerServerUrl = project.findProperty('dockerHost') ?: (System.properties['dockerHost'] ?: System.getenv('DOCKER_HOST'))
            if (!dockerServerUrl) {
                dockerServerUrl = 'unix:///var/run/docker.sock'
            }
        }
        
        systemProperty 'dockerServerUrl', dockerServerUrl
        logger.quiet "Using Docker server URL '$dockerServerUrl' for executing tests with task '$task.name'."
    }

    def dockerCertPath = project.findProperty('dockerCertPath') ?: (System.properties['dockerCertPath'] ?: System.getenv('DOCKER_CERT_PATH'))
    if(dockerCertPath) {
        logger.quiet "Using Docker cert path '$dockerCertPath' for executing tests with task '$task.name'."
        systemProperty 'dockerCertPath', dockerCertPath
    }
    
    def dockerPrivateRegistryUrl = project.findProperty('dockerPrivateRegistryUrl') ?: (System.properties['dockerPrivateRegistryUrl'] ?: System.getenv('DOCKER_REGISTRY_HOST'))
    if(dockerPrivateRegistryUrl) {
        logger.quiet "Using Docker private registry URL '$dockerPrivateRegistryUrl' for executing tests with task '$task.name'."
        systemProperty 'dockerPrivateRegistryUrl', dockerPrivateRegistryUrl
    }
}